"""Grammar fix 'achievment' word

Revision ID: 6450d2d059fa
Revises: 2ef2c5216343
Create Date: 2024-04-01 21:38:34.961692

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6450d2d059fa'
down_revision: Union[str, None] = '2ef2c5216343'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('achievements',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('points', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('en_achievements',
    sa.Column('parent_ach_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['parent_ach_id'], ['achievements.id'], ),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('ru_achievements',
    sa.Column('parent_ach_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['parent_ach_id'], ['achievements.id'], ),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('user_achievement',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('achievement_id', sa.Integer(), nullable=False),
    sa.Column('awarding_datetime', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievements.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'achievement_id')
    )

    # user-defined section
    conn = op.get_bind()

    queries = (
        "INSERT INTO achievements SELECT * FROM achievments",
        "INSERT INTO en_achievements SELECT * FROM en_achievments",
        "INSERT INTO ru_achievements SELECT * FROM ru_achievments",
        "INSERT INTO user_achievement SELECT * FROM user_achievment",
    )

    for query in queries:
        conn.execute(text(query))

    drop_queries = (
        "DROP TABLE achievments CASCADE",
        "DROP TABLE en_achievments CASCADE",
        "DROP TABLE ru_achievments CASCADE",
        "DROP TABLE user_achievment CASCADE",
    )

    for query in drop_queries:
        conn.execute(text(query))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('achievments',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('achievments_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='achievments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('ru_achievments',
    sa.Column('parent_ach_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['parent_ach_id'], ['achievments.id'], name='ru_achievments_parent_ach_id_fkey'),
    sa.PrimaryKeyConstraint('name', name='ru_achievments_pkey')
    )
    op.create_table('en_achievments',
    sa.Column('parent_ach_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['parent_ach_id'], ['achievments.id'], name='en_achievments_parent_ach_id_fkey'),
    sa.PrimaryKeyConstraint('name', name='en_achievments_pkey')
    )
    op.create_table('user_achievment',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('achievment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('awarding_datetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['achievment_id'], ['achievments.id'], name='user_achievment_achievment_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_achievment_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'achievment_id', name='user_achievment_pkey')
    )

    # user-definid section
    conn = op.get_bind()

    queries = (
        "INSERT INTO achievments SELECT * FROM achievements",
        "INSERT INTO en_achievments SELECT * FROM en_achievements",
        "INSERT INTO ru_achievments SELECT * FROM ru_achievements",
        "INSERT INTO user_achievment SELECT * FROM user_achievement",
    )

    for query in queries:
        conn.execute(text(query))

    drop_queries = (
        "DROP TABLE achievements CASCADE",
        "DROP TABLE en_achievements CASCADE",
        "DROP TABLE ru_achievements CASCADE",
        "DROP TABLE user_achievement CASCADE",
    )

    for query in drop_queries:
        conn.execute(text(query))
    # ### end Alembic commands ###
